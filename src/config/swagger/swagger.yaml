components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Enter your token with "Bearer " prefix. Example: **Bearer <token>**'
  schemas:
    PermissionType:
      type: string
      enum:
        - tenant
        - platform
      description: Type of the permission, either `tenant` or `platform`.

    RoleType:
      type: string
      enum:
        - standard
        - custom
      description: Type of the role, either `standard` or `custom`.

    UserType:
      type: string
      enum:
        - Chief Admin
        - Company Admin
        - Support User
        - User
      description: Type of the user, representing their type within the system.

    VariableType:
      type: string
      enum:
        - text
        - multiSelect
        - numeric
        - singleSelect
      description: The type of the variable, defining the input method.

    VariableCategories:
      type: string
      enum:
        - custom
        - standard
      description: The category of the variable, either custom or standard.

    ContentType:
      type: string
      enum:
        - PDF
        - video
        - document
        - powerPoint
        - scorm
        - assessment
      description: Different types of content supported.

    FileType:
      type: string
      enum:
        - tenantLogo
        - userProfile
        - content
      description: Which type of file.

    ScoringType:
      type: string
      enum:
        - max score
        - per question
        - no score
      description: Different scoring types for assessments.

    TimeType:
      type: string
      enum:
        - timed
        - untimed
      description: Different timeType  for assessments.

    QuestionType:
      type: string
      enum:
        - multi select
        - single select
        - boolean
      description: Types of questions.

    TokenTypes:
      type: string
      enum:
        - LOGIN_OTP
        - FORGOT_PASSWORD
      description: Types of tokens.

    ClientTypes:
      type: string
      enum:
        - Test
        - POC
        - Production
      description: Types of clients.

    FiltersEnum:
      type: string
      enum:
        - DropDown
        - DateRange
        - NumberRange
      description: Filter types.

    FilterFor:
      type: string
      enum:
        - employee
        - tenant
        - content
      description: Entities to which filters can apply.

    CohortRuleDataTypes:
      type: string
      enum:
        - dropDown
        - date
      description: Data types used in cohort rules.

    RuleTypes:
      type: string
      enum:
        - cohort
        - joiningDate
        - customVariables
      description: Different types of rules.

    RuleOperators:
      type: string
      enum:
        - EQUAL
        - BETWEEN
        - LESS_THAN
        - GREATER_THAN
        - NOTEQUAL
      description: Operators used in rules.

    AppPermission:
      type: string
      enum:
        - USER_READ
        - USER_WRITE
        - VARIABLE_READ
        - VARIABLE_WRITE
      description: Application permissions.

    SortOrder:
      type: string
      enum:
        - ASC
        - DESC
      description: Sort order (ascending or descending).

    CampaignStatusType:
      type: string
      enum:
        - completed
        - in-progress
        - failed
      escription: Status of the Campaign( completed, in-progress, failed).

    HttpStatusCode:
      type: integer
      enum:
        - 200
        - 400
        - 500
        - 401
        - 201
        - 409
        - 404
        - 403
      description: HTTP status codes.
      
    TemplateType:
      type: string
      enum:
        - external
        - simple
        - interactive
      example: external
      description: "Defines the type of template"
      
    TemplateCategory:
      type: string
      enum:
        - Utility
        - Marketing
      example: Utility
      description: "Defines the category of template"

    TemplateStatus:
      type: string
      enum:
        - draft
        - pending
        - approved
        - error
        - rejected
      example: draft
      description: Defines the status of the template

    Channel:
      type: string
      enum:
        - whatsapp
        - SMS
        - viber
      example: whatsapp
      description: "Defines the communication channel for the template"
      
    HeaderType:
      type: string
      enum:
        - text
        - media
      example: text
      description: "Defines the type of header"
      
    MessageType:
      type: string
      enum:
        - text
        - image
        - video
        - audio
        - file
        - location
        - sticker
      example: text
      description: "Defines the type of message content"
      
    UploadFileMediaType:
      type: string
      enum:
        - image
        - video
        - document
      example: image
      description: "Defines the media type for file uploads"
      
    MediaType:
      type: string
      enum:
        - image
        - video
        - document
        - location
      example: image
      description: "Defines the media type for a card or content"
      
    TemplateContentType:
      type: string
      enum:
        - common
        - carousel
      example: carousel
      description: "Defines the type of content in the template"
      
    ContentSubType:
      type: string
      enum:
        - common
        - request
        - address
        - flow
      example: common
      description: "Defines the sub-type of content in the template"
      
    FlowType:
      type: string
      enum:
        - navigate
        - data_exchange
      example: navigate
      description: "Defines the type of flow interaction in the template"
      
    ActionType:
      type: string
      enum:
        - quickReply
        - menu
      example: quickReply
      description: "Defines the action type of a button"
      
    ButtonType:
      type: string
      enum:
        - quickReply
        - websiteVisit
        - flow
      example: websiteVisit
      description: "Defines the type of button in the template"
      
    CardMediaType:
      type: string
      enum:
        - image
        - video
      example: image
      description: "Defines the type of media for content cards"
      
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: akash@codiot.com
        password:
          type: string
          example: Admin@123
        countryCode:
          type: string
          example: +91
      required:
        - username
        - password
        - countryCode

    LoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            userData:
              type: object
              properties:
                access:
                  type: array
                  items:
                    type: string
                  example:
                    - Read Permission
                    - user
                    - variable
                    - user.read
                    - user.write
                    - variable.read
                    - variable.write
                email:
                  type: string
                  example: akash@codiot.com
                mobileNumber:
                  type: string
                  example: 8866104284
                firstName:
                  type: string
                  example: Akash
                lastName:
                  type: string
                  example: Akash
                countryCode:
                  type: string
                  example: +91
                tenantIds:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 7
                      name:
                        type: string
                        example: new LineeMate1231
                      trademark:
                        type: string
                        example: LineMadte1231@gmail.com
                      phoneNumber:
                        type: string
                        example: 1234567890
                      createdBy:
                        type: integer
                        example: 1
                      Creator:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          firstName:
                            type: string
                            example: Akash
                          lastName:
                            type: string
                            example: Akash
                      Updater:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 1
                          firstName:
                            type: string
                            example: Akash
                          lastName:
                            type: string
                            example: Akash
                isTemporaryPassword:
                  type: boolean
                  example: false
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....."
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    ForgotPasswordRequest:
      type: object
      properties:
        username:
          type: string
          example: akash@codiot.com
      required:
        - username

    ForgotPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    VerifyOtpRequest:
      type: object
      properties:
        otp:
          type: string
          example: 336119
      required:
        - otp

    VerifyOtpResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            email:
              type: string
              example: akash@codiot.com
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"   

    ResetPasswordRequest:
      type: object
      properties:
        otp:
          type: string
          example: 336119
        password:
          type: string
          example: qwe@123
      required:
        - otp
        - password

    ResetPasswordResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            email:
              type: string
              example: akash@codiot.com
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Nikunj
        lastName:
          type: string
          example: Dhaduk
        email:
          type: string
          example: nikunj.dhaduk33@gmail.com
        countyCode:
          type: string
          example: +91
        mobileNumber:
          type: string
          example: 9912226316
        userType:
          type: string
          example: Company Admin
        tenantIds:
          type: array
          items:
            type: integer
          example: [1]
        employeeId:
          type: string
          example: uiui
        profilePhoto:
          type: string
          example: ''
        tenantVariables:
          type: array
          items:
            type: object
            properties:
              tenantId:
                type: integer
                example: 1
              variables:
                type: array
                items:
                  type: object
                  properties:
                    variableId:
                      type: integer
                      example: 1
                    value:
                      type: string
                      example: managere

    CreateUserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"   

    GetUserByIdResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            firstName:
              type: string
              example: Akash
            lastName:
              type: string
              example: Akash
            email:
              type: string
              example: akash@codiot.com
            mobileNumber:
              type: string
              example: 8866104284
            tenantIds:
              type: array
              items:
                type: integer
            isTemporaryPassword:
              type: boolean
              example: false
            userType:
              type: string
              example: Chief Admin
            countryCode:
              type: string
              example: +91
            employeeId:
              type: string
              nullable: true
              example: null
            profilePhoto:
              type: string
              nullable: true
              example: null
            tenantDetails:
              type: array
              items:
                type: object
            tenantVariableDetail:
              type: array
              items:
                type: object
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"    

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Nikunj
        lastName:
          type: string
          example: Dhaduk
        email:
          type: string
          example: nikunj.dhaduk1@gmail.com
        mobileNumber:
          type: string
          example: 9912123291
        userType:
          type: string
          example: Company Admin
        countyCode:
          type: string
          example: +91
        tenantIds:
          type: array
          items:
            type: integer
          example: [1]
        employeeId:
          type: string
          example: ''
        profilePhoto:
          type: string
          example: ''
        tenantVariables:
          type: array
          items:
            type: object
            properties:
              tenantId:
                type: integer
                example: 1
              variables:
                type: array
                items:
                  type: object
                  properties:
                    variableId:
                      type: integer
                      example: 1
                    value:
                      type: string
                      example: managere
      required:
        - firstName
        - lastName
        - email
        - mobileNumber
        - userType
        - countyCode
        - tenantIds
    
    UpdateUserResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"   
    
    ListUsersRequest:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        sortField:
          type: string
          example: id
        sortOrder:
          type: string
          example: ASC
        search:
          type: string
          example: '91'
        filter:
          type: object
          properties:
            isActive:
              type: boolean
              example: true
            dynamicFilter:
              type: array
              items:
                type: object
                properties:
                  filterTitle:
                    type: string
                    example: "Joining Date"
                  filterKey:
                    type: string
                    example: "joiningDate"
                  filterType:
                    type: string
                    example: "DateRange"
                  minValue:
                    type: string
                    format: date
                    example: "2024-08-01"
                  maxValue:
                    type: string
                    format: date
                    example: "2024-08-31"
                  selectedValue:
                    type: string
                    example: "hr"
                  variableId:
                    type: integer
                    example: 6
                  options:
                    type: array
                    items:
                      type: string
                    example:
                      - "manager"
                      - "hr"
                required:
                  - filterTitle
                  - filterKey
                  - filterType
                  - minValue
                  - maxValue
              example:
                - filterTitle: "Joining Date"
                  filterKey: "joiningDate"
                  filterType: "DateRange"
                  minValue: "2024-08-01"
                  maxValue: "2024-08-31"
                - filterTitle: "role"
                  filterKey: "role"
                  filterType: "DropDown"
                  selectedValue: "hr"
                  variableId: 6
                  options:
                    - "manager"
                    - "hr"
      required:
        - page
        - limit

    ListUsersResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              example: 1
            rows:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 54
                  firstName:
                    type: string
                    example: test
                  lastName:
                    type: string
                    example: user
                  email:
                    type: string
                    example: test.useri8@gmail.com
                  userType:
                    type: string
                    example: User
                  mobileNumber:
                    type: string
                    example: 98130171108
                  createdAt:
                    type: string
                    format: date-time
                    example: 2024-08-27T11:11:01.106Z
                  tenantIds:
                    type: array
                    items:
                      type: integer
                    example: [1]
                  employeeId:
                    type: string
                    example: uiui
                  profilePhoto:
                    type: string
                    nullable: true
                    example: null
                  tenantDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: new LineMate
                        trademark:
                          type: string
                          example: LineMate@gmail.com
                        phoneNumber:
                          type: string
                          example: 1234567890
                  tenantVariableDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        variableId:
                          type: integer
                          example: 1
                        value:
                          type: string
                          example: managere
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message    
      
    DeleteUsersRequest:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: integer
          example: [2, 3]
      required:
        - userIds

    DeleteUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 60
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message  
    
    DeactivateUsersRequest:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: integer
          example: [2]
      required:
        - userIds

    DeactivateUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 60
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message
    
    ActivateUsersRequest:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: integer
          example: [2]
      required:
        - userIds

    ActivateUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 60
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message
      
    ChangePasswordRequest:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: integer
          example: [2, 3]
        tenantId:
          type: integer
          example: 3
      required:
        - userIds
        - tenantId

    ChangePasswordResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 60
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message

    AddVariableRequest:
      type: object
      properties:
        name:
          type: string
          example: role
        isMandatory:
          type: boolean
          example: true
        type:
          type: string
          example: multiSelect
        description:
          type: string
          example: test description
        placeHolder:
          type: string
          example: role
        category:
          type: string
          example: custom
        tenantId:
          type: integer
          example: 1
        options:
          type: array
          items:
            type: string
          example: ['Role', 'Manager']
      required:
        - name
        - isMandatory
        - type
        - description
        - placeHolder
        - category
        - tenantId
        - options

    AddVariableResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success" 

    GetVariableRequest:
      type: object
      properties:
        id:
          type: string
          example: '1'
      required:
        - id

    GetVariableResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: firstName
            isMandatory:
              type: boolean
              example: true
            type:
              type: string
              example: text
            options:
              type: array
              items:
                type: string
              example: null
            placeHolder:
              type: string
              example: Please Enter First Name
          required:
            - id
            - name
            - isMandatory
            - type
            - placeHolder
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message

    UpdateVariableRequest:
      type: object
      properties:
        name:
          type: string
          example: role
        isMandatory:
          type: boolean
          example: true
        type:
          type: string
          example: multiSelect
        description:
          type: string
          example: test description
        placeHolder:
          type: string
          example: role
        category:
          type: string
          example: custom
        tenantId:
          type: integer
          example: 1
        options:
          type: array
          items:
            type: string
          example: ['Role', 'Manager']
      required:
        - name
        - isMandatory
        - type
        - description
        - placeHolder
        - category
        - tenantId
        - options    

    UpdateVariableResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success" 

    DeleteVariableRequest:
      type: object
      properties:
        id:
          type: string
          example: '1'
      required:
        - id

    DeleteVariableResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 9
          required:
            - id
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Success
      required:
        - data
        - success
        - code
        - message   

    ListVariablesRequest:
        type: object
        properties:
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          sortField:
            type: string
            example: id
          sortOrder:
            type: string
            example: ASC
          search:
            type: string
            example: ''
          filter:
            type: object
            properties:
              category:
                type: string
                example: 'custom'
        required:
          - page
          - limit
          - sortField
          - sortOrder
          - search
          - filter  

    ListVariablesResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              example: 8
            rows:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "firstName"
                  isMandatory:
                    type: boolean
                    example: true
                  type:
                    type: string
                    example: "text"
                  description:
                    type: string
                    example: ""
                  category:
                    type: string
                    example: "standard"
                  options:
                    type: array
                    items:
                      type: string
                    example: null
                  tenantId:
                    type: integer
                    example: null
              example:
                - id: 1
                  name: "firstName"
                  isMandatory: true
                  type: "text"
                  description: ""
                  category: "standard"
                  options: null
                  tenantId: null
                - id: 2
                  name: "lastName"
                  isMandatory: true
                  type: "text"
                  description: ""
                  category: "standard"
                  options: null
                  tenantId: null
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"
      required:
        - data
        - success
        - code
        - message   

    GetVariableByUserRequest:
      type: object
      properties:
        tenantId:
          type: integer
          example: 3
      required:
        - tenantId

    GetVariableByUserResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 4
              variableId:
                type: integer
                example: 6
              value:
                type: string
                example: "managere"
              name:
                type: string
                example: "role"
          example:
            - id: 4
              variableId: 6
              value: "managere"
            - id: 5
              variableId: 7
              value: "managere"
              name: "role"
            - id: 6
              variableId: 8
              value: "managere"
              name: "role12"
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"
      required:
        - data
        - success
        - code
        - message

    RuleOptionResponse:
      type: object
      properties:
        filterTitle:
          type: string
          description: Title of the filter
        filterKey:
          type: string
          description: Key of the filter
        filterType:
          type: string
          description: Type of the filter
        minValue:
          type: string
          description: Minimum value for DateRange or NumberRange filters
          example: "2024-09-01"
        maxValue:
          type: string
          description: Maximum value for DateRange or NumberRange filters
          example: "2024-09-30"
        selectedValue:
          type: string
          description: Selected value for DropDown filters
          example: ""
        variableId:
          type: integer
          description: Variable ID associated with the filter
          example: 13
        options:
          type: array
          items:
            type: string
          description: Options for DropDown filters

    AddCohortRequest:
      type: object
      properties:
        tenantId:
          type: integer
          description: ID of the tenant
          example: 1
        name:
          type: string
          description: Name of the cohort
          example: "test cohort"
        userIds:
          type: array
          description: List of user IDs to be added to the cohort
          items:
            type: integer
          example: [2, 3]
        rules:
          type: array
          description: Rules for the cohort
          items:
            $ref: '#/components/schemas/CohortRule'
      required:
        - tenantId
        - name
        - userIds
        - rules
        
    AddCohortResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          example: "Success"    

    GetCohortResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: integer
              example: 32
            name:
              type: string
              example: "test"
            description:
              type: string
              example: "test"
            rules:
              type: array
              items:
                type: object
                properties:
                  or:
                    type: array
                    items:
                      type: object
                      properties:
                        or:
                          type: array
                          items:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "cohort"
                              value:
                                type: integer
                                example: 6
                              operators:
                                type: string
                                example: "EQUAL"
            isExistingRuleProcess:
              type: boolean
              example: false
            tenantId:
              type: integer
              example: 1
            createdAt:
              type: string
              format: date-time
              example: "2024-09-02T04:43:51.234Z"
            userMatrix:
              type: array
              items:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 4
                  firstName:
                    type: string
                    example: "Nikunj"
                  lastName:
                    type: string
                    example: "user"
            Creator:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                firstName:
                  type: string
                  example: "Akash"
                lastName:
                  type: string
                  example: "Akash"
                profilePhoto:
                  type: string
                  nullable: true
                  example: null
            Updater:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                firstName:
                  type: string
                  example: "Akash"
                lastName:
                  type: string
                  example: "Akash"
                profilePhoto:
                  type: string
                  nullable: true
                  example: null
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    UpdateCohortRequest:
      type: object
      properties:
        tenantId:
          type: integer
          description: ID of the tenant
          example: 1
        name:
          type: string
          description: Name of the cohort
          example: "test cohort"
        userIds:
          type: array
          description: List of user IDs to be added to the cohort
          items:
            type: integer
          example: [2, 3]
      required:
        - tenantId
        - name
        - userIds  
            
    UpdateCohortResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          example: "Success"  

    deleteCohortResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          example: "Success" 

    ListCohortsRequest:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        sortField:
          type: string
          example: id
        sortOrder:
          type: string
          example: ASC
        search:
          type: string
          example: ''

    ListCohortsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              example: 10
            rows:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 34
                  name:
                    type: string
                    example: "test"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-09-03T07:46:25.973Z"
                  tenantId:
                    type: integer
                    example: 1
                  description:
                    type: string
                    nullable: true
                    example: "test"
                  EnrolledUserCount:
                    type: string
                    example: "5"
                  Creator:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: "Akash"
                      lastName:
                        type: string
                        example: "Akash"
                      profilePhoto:
                        type: string
                        nullable: true
                        example: null
                  Updater:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: "Akash"
                      lastName:
                        type: string
                        example: "Akash"
                      profilePhoto:
                        type: string
                        nullable: true
                        example: null
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"   

    AssignCohortRequest:
      type: object
      properties:
        cohortIds:
          type: array
          description: List of cohort IDs to which users will be assigned
          items:
            type: integer
          example: [2]
        userIds:
          type: array
          description: List of user IDs to be assigned to the cohorts
          items:
            type: integer
          example: [2, 3]
      required:
        - cohortIds
        - userIds

    AssignCohortResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    GetCohortByUserRequest:
      type: object
      properties:
        userId:
          type: array
          description: List of user IDs for which cohorts will be retrieved
          items:
            type: integer
          example: [2]
      required:
        - userId

    GetCohortByUserResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 21
              name:
                type: string
                example: "test cohort"
              createdAt:
                type: string
                format: date-time
                example: "2024-08-29T10:00:21.069Z"
              tenantId:
                type: integer
                example: 1
              description:
                type: string
                nullable: true
                example: "test"
              EnrolledUserCount:
                type: string
                example: "2"
              Creator:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  firstName:
                    type: string
                    example: "Akash"
                  lastName:
                    type: string
                    example: "Akash"
                  profilePhoto:
                    type: string
                    nullable: true
                    example: null
              Updater:
                type: object
                nullable: true
                properties:
                  id:
                    type: integer
                    example: 1
                  firstName:
                    type: string
                    example: "Akash"
                  lastName:
                    type: string
                    example: "Akash"
                  profilePhoto:
                    type: string
                    nullable: true
                    example: null
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"

    AddContentRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the content
          example: Access Portal
        type:
          $ref: '#/components/schemas/ContentType'
          description: Type of the content
        description:
          type: string
          description: Description of the content
          example: Have access portal
        uploadedFileIds:
          type: array
          description: List of uploaded file IDs associated with the content
          items:
            type: integer
          example: []
        tenantId:
          type: integer
          description: ID of the tenant
          example: 1
        isPublish:
          type: boolean
          description: Whether the content is published
          example: false
        isArchive:
          type: boolean
          description: Whether the content is archived
          example: false
        scoring:
          $ref: '#/components/schemas/ScoringType'
          description: Scoring method for the content
        score:
          type: integer
          description: Maximum score for the content
          example: 50
        pass:
          type: integer
          description: Pass mark for the content
          example: 50
        timed:
          type: integer
          description: Time limit for the content in minutes
          example: 10
        timeType:
          $ref: '#/components/schemas/TimeType'
          description: Type of timing (e.g., timed, untimed)
      required:
        - name
        - type
        - tenantId

    AddContentResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the content was successfully added
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              description: ID of the added content
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: "Success"

    UpdateContentRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the content
          example: Access Portal
        type:
          $ref: '#/components/schemas/ContentType'
        description:
          type: string
          description: Description of the content
          example: Have access portal
        uploadedFileIds:
          type: array
          items:
            type: integer
          description: List of uploaded file IDs associated with the content
          example: []
        tenantId:
          type: integer
          description: ID of the tenant
          example: 1
        isPublish:
          type: boolean
          description: Whether the content is published
          example: false
        isArchive:
          type: boolean
          description: Whether the content is archived
          example: false
        scoring:
          $ref: '#/components/schemas/ScoringType'
        score:
          type: integer
          description: Maximum score for the content
          example: 50
        pass:
          type: integer
          description: Pass mark for the content
          example: 50
        timed:
          type: integer
          description: Time limit for the content in minutes
          example: 10
        timeType:
          $ref: '#/components/schemas/TimeType'
      required:
        - name
        - type
        - tenantId

    GetContentResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              description: ID of the content
              example: 1
            name:
              type: string
              description: Name of the content
              example: Access Portal
            type:
              $ref: '#/components/schemas/ContentType'
            description:
              type: string
              description: Description of the content
              example: Have access portal
            uploadedFileIds:
              type: array
              items:
                type: integer
              description: List of uploaded file IDs associated with the content
              example: []
            tenantId:
              type: integer
              description: ID of the tenant
              example: 1
            isPublish:
              type: boolean
              description: Whether the content is published
              example: false
            isArchive:
              type: boolean
              description: Whether the content is archived
              example: false
            scoring:
              $ref: '#/components/schemas/ScoringType'
            score:
              type: integer
              description: Maximum score for the content
              example: 50
            pass:
              type: integer
              description: Pass mark for the content
              example: 50
            timed:
              type: integer
              description: Time limit for the content in minutes
              example: 10
            timeType:
              $ref: '#/components/schemas/TimeType'
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: "Success"

    UpdateContentResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the update was successful
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              description: ID of the content
              example: 1
            name:
              type: string
              description: Updated name of the content
              example: Access Portal
            type:
              $ref: '#/components/schemas/ContentType'
            description:
              type: string
              description: Updated description of the content
              example: Have access portal
            uploadedFileIds:
              type: array
              items:
                type: integer
              description: Updated list of uploaded file IDs associated with the content
              example: []
            tenantId:
              type: integer
              description: ID of the tenant
              example: 1
            isPublish:
              type: boolean
              description: Whether the content is published
              example: false
            isArchive:
              type: boolean
              description: Whether the content is archived
              example: false
            scoring:
              $ref: '#/components/schemas/ScoringType'
            score:
              type: integer
              description: Maximum score for the content
              example: 50
            pass:
              type: integer
              description: Pass mark for the content
              example: 50
            timed:
              type: integer
              description: Time limit for the content in minutes
              example: 10
            timeType:
              $ref: '#/components/schemas/TimeType'
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: "Content updated successfully"
        
    DeleteContentResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the deletion was successful
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              description: ID of the deleted content
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: "Content deleted successfully"
        
    ListContentsRequest:
      type: object
      properties:
        page:
          type: integer
          description: The page number for pagination
          example: 1
        limit:
          type: integer
          description: The number of items per page
          example: 10
        sortField:
          type: string
          description: The field to sort by
          example: id
        sortOrder:
          type: string
          description: The order of sorting (ASC for ascending, DESC for descending)
          example: ASC
        search:
          type: string
          description: Search term to filter results
          example: ''
        filter:
          type: object
          description: Filters to apply to the list of contents
          properties:
            archive:
              type: boolean
              description: Filter by archived content
              example: true
            isPublish:
              type: boolean
              description: Filter by published content
              example: false
            updatedBetween:
              type: object
              description: Filter by content updated between specific dates
              properties:
                startDate:
                  type: string
                  format: date
                  description: The start date for filtering
                  example: '2024-07-17'
                endDate:
                  type: string
                  format: date
                  description: The end date for filtering
                  example: '2024-07-31'
      required:
        - page
        - limit

    ListContentsResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              description: The list of content items
              items:
                $ref: '#/components/schemas/ContentItem'
            total:
              type: integer
              description: The total number of content items available
              example: 100
            page:
              type: integer
              description: The current page number
              example: 1
            limit:
              type: integer
              description: The number of items per page
              example: 10
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Response message
          example: "Contents retrieved successfully"

    ContentItem:
      type: object
      properties:
        id:
          type: integer
          description: ID of the content item
          example: 1
        name:
          type: string
          description: Name of the content item
          example: Access Portal
        type:
          $ref: '#/components/schemas/TemplateContentType'
        description:
          type: string
          description: Description of the content item
          example: Have access portal
        tenantId:
          type: integer
          description: ID of the tenant
          example: 1
        isPublish:
          type: boolean
          description: Whether the content item is published
          example: false
        isArchive:
          type: boolean
          description: Whether the content item is archived
          example: false
        scoring:
          $ref: '#/components/schemas/ScoringType'
        score:
          type: integer
          description: Maximum score for the content
          example: 50
        pass:
          type: integer
          description: Pass mark for the content
          example: 50
        timed:
          type: integer
          description: Time limit for the content in minutes
          example: 10
        timeType:
          $ref: '#/components/schemas/TimeType'
        createdAt:
          type: string
          format: date-time
          description: Date and time when the content item was created
          example: '2024-07-17T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the content item was last updated
          example: '2024-07-31T15:00:00Z'

    CreateTenantRequest:
      type: object
      properties:
        name:
          type: string
          example: Test1
        companyType:
          type: string
          example: partnership
        trademark:
          type: string
          example: admin@gmail.com
        phoneNumber:
          type: integer
          example: 1234567890
        gstNumber:
          type: string
          example: 123456780
        currencyCode:
          type: string
          example: INR
        isdCode:
          type: integer
          example: 91
        clientType:
          type: string
          example: Test
        authorisedFirstName:
          type: string
          example: test
        authorisedLastName:
          type: string
          example: tcd
        authorisedEmail:
          type: string
          example: cdcd
        authorisedMobileNo:
          type: integer
          example: 1234567890
        companyAddress:
          type: string
          example: cdcd
        companyCountry:
          type: string
          example: cdcd
        companyState:
          type: string
          example: cdcad
        companyCity:
          type: string
          example: cdcd
        companyPinCode:
          type: integer
          example: 395006
        whitelistedIps:
          type: string
          example: cdc
      required:
        - name
        - companyType
        - trademark
        - phoneNumber

    CreateTenantResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Tenant created successfully"
        
    GetTenantResponse:
      type: object
      properties:
        name:
          type: string
        companyType:
          type: string
        trademark:
          type: string
        phoneNumber:
          type: integer
        gstNumber:
          type: string
        currencyCode:
          type: string
        isdCode:
          type: integer
        clientType:
          type: string
        authorisedFirstName:
          type: string
        authorisedLastName:
          type: string
        authorisedEmail:
          type: string
        authorisedMobileNo:
          type: integer
        companyAddress:
          type: string
        companyCountry:
          type: string
        companyState:
          type: string
        companyCity:
          type: string
        companyPinCode:
          type: integer
        whitelistedIps:
          type: string
    
    UpdateTenantRequest:
      $ref: '#/components/schemas/CreateTenantRequest'

    UpdateTenantResponse:
      $ref: '#/components/schemas/CreateTenantResponse'

    DeleteTenantResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Tenant deleted successfully"
      
    ListTenantRequest:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        sortField:
          type: string
          example: id
        sortOrder:
          type: string
          example: ASC
      required:
        - page
        - limit

    ListTenantResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Test1
              companyType:
                type: string
                example: partnership
              trademark:
                type: string
                example: admin@gmail.com
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Tenant list fetched successfully"
    
    AddCampaignResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          example: "Success"

    GetCampaignResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: LineMate
            description:
              type: string
              example: LineMate Description
            rules:
              type: array
              items:
                type: object
                properties:
                  or:
                    type: array
                    items:
                      type: object
                      properties:
                        or:
                          type: array
                          items:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "cohort"
                              value:
                                type: integer
                                example: 6
                              operators:
                                type: string
                                example: "EQUAL"              
            tenantId:
              type: integer
              example: 1
            createdAt:
              type: string
              example: "2024-09-03T07:46:25.973Z"
            tags:
              type: array
              example: ["test", "test1"]
            status:
              type: string
              example: "completed"
            channel:
              type: array
              example: ["whatsapp","viber","sms"]
            reoccurenceType:
              type: string
              example: "custom"
            reoccurenceDetails:
              type: object
              properties:
                repeatEvery:
                  type: integer
                  example: 1
                intervalTimeUnit:
                  type: string
                  example: "day"  
                afterOccurences:
                  type: integer
                  example: 5
                startDate:
                  type: string
                  example: "2024-09-03T07:46:25.973Z"
                endDate:
                  type: string
                  example: "2024-09-03T07:46:25.973Z"
                time:  #Time field will only be shoqn if the reoccurenceType is "once"
                  type: string
                  example: "14:25"              
        code:
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          example: "Success"

    ListCampaignResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            count:
              type: integer
              description: Total number of campaigns
              example: 1
            rows:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: Campaign ID
                    example: 1
                  name:
                    type: string
                    description: Name of the campaign
                    example: "Campaign"
                  description:
                    type: string
                    description: Optional description of the campaign
                    example: "optional"
                  channel:
                    type: array
                    items:
                      type: string
                    description: Communication channels used in the campaign
                    example: ["sms"]
                  whatsappTemplateId:
                    type: integer
                    description: WhatsApp template ID
                    example: 1
                  smsTemplateId:
                    type: integer
                    description: SMS template ID
                    example: 1
                  viberTemplateId:
                    type: integer
                    description: Viber template ID
                    example: 2
                  rules:
                    type: array
                    description: Campaign rules with nested conditions
                    items:
                      type: object
                      properties:
                        and:
                          type: array
                          items:
                            type: object
                            properties:
                              or:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    title:
                                      type: string
                                      description: Rule title
                                      example: "cohort"
                                    value:
                                      type: string
                                      description: Rule value
                                      example: 1
                                    operators:
                                      type: string
                                      description: Operator applied in the rule
                                      example: "EQUAL"
                  tags:
                    type: array
                    description: Tags associated with the campaign
                    items:
                      type: string
                    example: ["tag2"]
                  status:
                    type: string
                    description: Status of the campaign
                    example: "completed"
                  isArchived:
                    type: boolean
                    description: If the campaign is archived
                    example: true
                  tenantId:
                    type: integer
                    description: Tenant ID
                    example: 1
                  reoccurenceType:
                    type: string
                    description: Reoccurrence type (optional)
                    example: null
                  reoccurenceDetails:
                    type: string
                    description: Details of the reoccurrence (optional)
                    example: null
                  createdAt:
                    type: string
                    format: date-time
                    description: Campaign creation timestamp
                    example: "2024-09-23T11:39:53.456Z"
                  updatedAt:
                    type: string
                    format: date-time
                    description: Campaign last update timestamp
                    example: "2024-09-23T11:39:53.456Z"
                  createdBy:
                    type: string
                    description: ID of the user who created the campaign
                    example: "0"
                  updatedBy:
                    type: string
                    description: ID of the user who last updated the campaign
                    example: null
                  isActive:
                    type: boolean
                    description: If the campaign is active
                    example: true
                  isDeleted:
                    type: boolean
                    description: If the campaign is deleted
                    example: false
    TemplateRequest:
      type: object
      properties:
        name:
          type: string
          example: "testtemplat945"
          description: "The name of the template"
        description:
          type: string
          example: "test_description"
          description: "The description of the template"
        body:
          type: string
          example: "test"
          description: "The body content of the template"
        language:
          type: string
          example: "en"
          description: "Language of the template"
        templateType:
          type: string
          enum: [external, internal]
          example: "external"
          description: "Type of the template"
        channel:
          type: string
          example: "whatsapp"
          description: "Channel where the template will be used"
        businessNumber:
          type: string
          example: "9913221018"
          description: "Business contact number"
        ISDCode:
          type: string
          example: "+91"
          description: "International Subscriber Dialing (ISD) code"
        HSMPassword:
          type: string
          example: "123456"
          description: "HSM password"
        HSMUserId:
          type: string
          example: "12"
          description: "HSM user ID"
        clientTemplateId:
          type: string
          example: "9876"
          description: "Client's template ID"
        contentType:
          type: string
          example: "carousel"
          description: "Type of content in the template"
        bodyPlaceHolder:
          type: array
          items:
            type: string
          example: []
          description: "Placeholders for the body content"
        isPreviewUrl:
          type: boolean
          example: false
          description: "Whether to preview the URL"
        contentCards:
          type: array
          items:
            $ref: '#/components/schemas/ContentCard'
          description: "Content cards associated with the template"
        tenantId:
          type: integer
          example: 1
          description: "Tenant ID"

    ContentCard:
      type: object
      properties:
        mediaType:
          type: string
          example: "image"
          description: "Type of media (image, video, etc.)"
        contentUrl:
          type: string
          example: "https://stg-portal-linemate-data.s3.ap-south-1.amazonaws.com/templates/temp/coverImage-1693871030394-62211 (1).png"
          description: "URL of the media content"
        mediaHandle:
          type: string
          example: "4::aW1hZ2UvanBlZw==:ARYUsWu90MAp6_amd8lc4hd75i3hKYidfWg6vMyE2ImEV-svNXuQbkJMeC1ZWbpdLAwe1trzR9ffyxR8_rfiVGMEq8BzyjADFKi_crz-C0pxRQ:e:1727641451:332189416110030:100088206755237:ARaVsVhZu7yXhyzfFmw"
          description: "Handle of the media content"
        mediaSample:
          type: string
          example: "coverImage-1693871030394-62211%20%281%29-1726829596657-998387126.png"
          description: "Sample of the media content"
        body:
          type: string
          example: "test_body"
          description: "Body content of the card"
        bodyPlaceHolder:
          type: array
          items:
            type: string
          example: []
          description: "Placeholders for the card body content"
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/Button'
          description: "Buttons associated with the content card"
    
    Button:
      type: object
      properties:
        buttonType:
          type: string
          example: "websiteVisit"
          enum: [websiteVisit, quickReply, call]
          description: "Type of the button"
        isDynamicUrl:
          type: boolean
          example: false
          description: "Whether the URL is dynamic"
        isTrackUrl:
          type: boolean
          example: false
          description: "Whether the URL should be tracked"
        title:
          type: string
          example: "View Demo"
          description: "Title of the button"
        websiteUrl:
          type: string
          example: "https://fyno.io/demo/"
          description: "URL to visit when the button is clicked"

    TemplateResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "The ID of the created template"
        payload:
          type: object
          description: "Payload of the template, based on the content created"
        message:
          type: string
          example: "Template created successfully"
          description: "Message describing the result of the operation"
        success:
          type: boolean
          example: true

    TemplateDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          example: 18
          description: "The ID of the template"
        name:
          type: string
          example: "testtemplat945"
          description: "The name of the template"
        description:
          type: string
          example: "test_description"
          description: "The description of the template"
        body:
          type: string
          example: "test"
          description: "The body content of the template"
        language:
          type: string
          example: "en"
          description: "Language of the template"
        templateType:
          $ref: '#/components/schemas/TemplateType'
        channel:
          $ref: '#/components/schemas/Channel'
        businessNumber:
          type: string
          example: "9913221018"
          description: "Business contact number"
        ISDCode:
          type: string
          example: "+91"
          description: "International Subscriber Dialing (ISD) code"
        HSMPassword:
          type: string
          example: "123456"
          description: "HSM password"
        HSMUserId:
          type: string
          example: "12"
          description: "HSM user ID"
        clientTemplateId:
          type: string
          example: "9876"
          description: "Client's template ID"
        contentType:
          $ref: '#/components/schemas/ContentType'
        isPreviewUrl:
          type: boolean
          example: false
          description: "Whether to preview the URL"
        contentCards:
          type: array
          items:
            $ref: '#/components/schemas/ContentCard'
          description: "Content cards for the template"
        tenantId:
          type: integer
          example: 1
          description: "Tenant ID"

    TemplateListRequest:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: "The page number for pagination."
        limit:
          type: integer
          example: 10
          description: "The number of records per page."
        sortField:
          type: string
          example: "id"
          description: "Field to sort the results by."
        sortOrder:
          type: string
          enum:
            - ASC
            - DESC
          example: "DESC"
          description: "Sort order for the results (ascending or descending)."
        search:
          type: string
          example: ""
          description: "Search term to filter the results."
        filter:
          type: object
          properties:
            isDeleted:
              type: boolean
              example: false
              description: "Filter for deleted or non-deleted records."
            language:
              type: string
              example: "hin"
              description: "Filter by language."
            channel:
              $ref: '#/components/schemas/Channel'
            status:
              $ref: '#/components/schemas/TemplateStatus'
            startDate:
              type: string
              format: date-time
              example: "2024-09-25T02:57:25.841Z"
              description: "Start date for filtering the templates."
            endDate:
              type: string
              format: date-time
              example: "2024-09-26T02:57:25.841Z"
              description: "End date for filtering the templates."
            createdBy:
              type: integer
              example: 1
              description: "Filter by creator's user ID."
            
    TemplateListResponse:
      type: object
      properties:
        total:
          type: integer
          example: 100
          description: "Total number of templates available."
        templates:
          type: array
          items:
            $ref: '#/components/schemas/TemplateDetailsResponse'
          description: "List of templates."
        success:
          type: boolean
          example: true
          description: "Indicates if the request was successful."

    UploadResponse:
      type: object
      properties:
        handler:
          type: string
          example: "uploaded_image_12345"
          description: "The identifier or handler of the uploaded file."
        file:
          type: string
          example: "https://example.com/uploads/pexels-bri-schneiter-28802-346529.jpg"
          description: "URL to access the uploaded file."
        sample:
          type: string
          example: "pexels-bri-schneiter-28802-346529.jpg"
          description: "Sample or filename of the uploaded file."
        success:
          type: boolean
          example: true
          description: "Indicates if the file was uploaded successfully."

    DeleteResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "The ID of the deleted template."
        message:
          type: string
          example: "Template deleted successfully"
          description: "Success message indicating the template was deleted."
        success:
          type: boolean
          example: true
paths:
  /permission/v1/add:
    post:
      summary: Create Permission
      tags:
        - Permission
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: user.write
                type:
                  type: string
                  example: platform
                description:
                  type: string
                  example: user can add and edit user
      responses:
        '200':
          description: Success

  /permission/v1/{id}:
    get:
      summary: Get Permission by Id
      tags:
        - Permission
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Permission
      tags:
        - Permission
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: user.view
                type:
                  type: string
                  example: platform
                description:
                  type: string
                  example: user can view user
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Permission
      tags:
        - Permission
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /permission/v1/list:
    post:
      summary: List Permissions
      tags:
        - Permission
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                sortField:
                  type: string
                  example: id
                sortOrder:
                  type: string
                  example: ASC
      responses:
        '200':
          description: Success

  /role/v1/add:
    post:
      summary: Create Role
      tags:
        - Role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Access Portal
                type:
                  type: string
                  example: custom
                description:
                  type: string
                  example: have access portal
                permissionIds:
                  type: array
                  items:
                    type: integer
                  example: []
                userIds:
                  type: array
                  items:
                    type: integer
                  example: []
                tenantId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Success

  /role/v1/{id}:
    get:
      summary: Get Role by Id
      tags:
        - Role
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      summary: Update Role
      tags:
        - Role
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Access Portal
                type:
                  type: string
                  example: custom
                description:
                  type: string
                  example: have access portal
                permissionIds:
                  type: array
                  items:
                    type: integer
                  example: []
                userIds:
                  type: array
                  items:
                    type: integer
                  example: []
                tenantId:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Success
    delete:
      summary: Delete Role
      tags:
        - Role
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success

  /role/v1/list:
    post:
      summary: List Roles
      tags:
        - Role
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
          required: false
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                sortField:
                  type: string
                  example: id
                sortOrder:
                  type: string
                  example: ASC
                search:
                  type: string
                  example: ''
      responses:
        '200':
          description: Success

  /auth/v1/login:
    post:
      summary: Login User
      tags:
        - Auth
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login, returns user data and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request, invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid password."

  /auth/v1/forgot-password:
    post:
      summary: Forgot Password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: akash@codiot.com
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'

  /auth/v1/verify-otp:
    post:
      summary: Verify OTP
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: 336119
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOtpResponse'

  /auth/v1/reset-password:
    post:
      summary: Reset Password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: 336119
                password:
                  type: string
                  example: qwe@123
      responses:
        '200':
          description: Success

  /auth/v1/file-upload:
    post:
      summary: Upload a file
      tags:
        - File
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [tenantLogo, userProfile, content]
                  description: The type of the file.
                  example: Tenant_Logo
                elementId:
                  type: string
                  description: The ID related to the content.
                  example: 1
                file:
                  type: string
                  format: binary
                  description: The file to upload.
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /user/v1/add:
    post:
      summary: Create User
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Success
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/CreateUserResponse'

  /user/v1/{id}:
    get:
      summary: Get User by Id
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/GetUserByIdResponse'
    put:
      summary: Update User
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Success
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserResponse'

  /user/v1/list:
    post:
      summary: List Users
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
          required: false
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'

  /user/v1/delete-users:
    post:
      summary: Delete Bulk Users
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUsersRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUsersResponse'

  /user/v1/de-active:
    post:
      summary: Deactivate Bulk Users
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateUsersRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateUsersResponse'

  /user/v1/active-users:
    post:
      summary: Activate Bulk Users
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateUsersRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateUsersResponse'
          

  /user/v1/change-password:
    post:
      summary: Change Password for Bulk Users
      tags:
        - User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'

  /tenant/v1/add:
    post:
      summary: Create Tenant
      tags:
        - Tenant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTenantResponse'

  /tenant/v1/{id}:
    get:
      summary: Get Tenant
      tags:
        - Tenant
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantResponse'

    put:
      summary: Update Tenant
      tags:
        - Tenant
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTenantResponse'

    delete:
      summary: Delete Tenant
      tags:
        - Tenant
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTenantResponse'

  /tenant/v1/list:
    post:
      summary: List Tenants
      tags:
        - Tenant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTenantRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTenantResponse'

  /variable/v1/add:
    post:
      summary: Add Variable
      tags:
        - Variable
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddVariableRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddVariableResponse'

  /variable/v1/{id}:
    get:
      summary: Get Variable by Id
      tags:
        - Variable
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVariableResponse'

    put:
      summary: Update Variable
      tags:
        - Variable
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVariableRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVariableResponse'

    delete:
      summary: Delete Variable
      tags:
        - Variable
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVariableResponse'

  /variable/v1/list:
    post:
      summary: List Variables
      tags:
        - Variable
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
          required: false
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariablesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariablesResponse'
    
  /content/v1/add:
    post:
      summary: Add Content
      tags:
        - Content
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddContentRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddContentResponse'

        
  /content/v1/{id}:
    get:
      summary: Get Content by Id
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContentResponse'
    put:
      summary: Update Content
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContentResponse'
    delete:
      summary: Delete Content
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContentResponse'

  /content/v1/list:
    post:
      summary: List Contents
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
          required: false
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContentsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContentsResponse'

  /filters/v1/list:
    get:
      summary: List Filters
      description: Retrieve a list of filters based on the specified criteria.
      tags:
        - Filters
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: filterFor
          required: true
          schema:
            type: string
          description: Specify the category for which filters are being requested, e.g., 'employee,tenant,content'.
        - name: tenantId
          in: header
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful retrieval of filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: string
                        description:
                          type: string

  /cohort/v1/rule-options:
    get:
      summary: Retrieve rule options
      tags:
        - Cohort
      operationId: getRuleOptions
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: tenantId
          required: true
          schema:
            type: integer
          description: 'Example : 1'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleOptionResponse'
          
  /cohort/v1/add:
    post:
      summary: Create a new cohort
      tags:
        - Cohort
      operationId: addCohort
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCohortRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCohortResponse'

  /cohort/v1/{id}:
    get:
      summary: Get Cohort by Id
      tags:
        - Cohort
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCohortResponse'
      put:
        summary: Update a cohort
        tags:
          - Cohort
        operationId: updateCohort
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true         
            schema:
              type: integer
        requestBody:
          required: true
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UpdateCohortRequest'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UpdateCohortResponse'
    delete:
      summary: Delete a cohort
      tags:
        - Cohort
      operationId: deleteCohort
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cohort deleted successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/deleteCohortResponse'

  /cohort/v1/list:
    post:
      summary: List cohort
      tags:
        - Cohort
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListCohortsRequest'
      responses:
        '200':
          description: Success  
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListCohortsResponse'

  /cohort/v1/get-cohort-by-user:
    post:
      summary: List cohort By User
      tags:
        - Cohort
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
                schema:
                  $ref: '#/components/schemas/GetCohortByUserRequest'
      responses:
        '200':
          description: Success  
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetCohortByUserResponse'

  /cohort/v1/assign-cohort:
    post:
      summary: Assign users to a specified cohort.
      tags:
        - Cohort
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignCohortRequest'
      responses:
        '200':
          description: Success  
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AssignCohortResponse'
  
  /assessment/v1/upload-question/{id}:
    post:
      summary: "upload a assessment question"
      tags:
        - Assessment
      description: "upload a assessment question."
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          description: question array that needs to be added
          required: true
          schema:
            type: object
            required:
              - questions
            properties:
              questions:
                type: array
                items:
                  type: object
                  required:
                    - question
                    - type
                    - options
                    - questionId
                    - score
                  properties:
                    questionId:
                      type: integer
                      example: 1
                    score:
                      type: integer
                      example: 10
                    question:
                      type: string
                      example: "what is your age range?"
                    type:
                      type: string
                      example: "single select"
                    options:
                      type: array
                      items:
                        type: object
                        required:
                          - option
                          - isCorrectAnswer
                          - optionId
                        properties:  
                          option:
                            type: string
                            example: "How many city in gujrat?"
                          isCorrectAnswer:
                            type: boolean
                            example: true
                          optionId:
                            type: integer
                            example: 1
      responses:
        201:
          description: Question upload successfully
        400:
          description: Invalid input

  /cb/viber/dlr:
    post:
      summary: Viber DLR callback
      tags:
        - Viber
      description: Endpoint to receive Viber DLR callbacks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Viber DLR callback payload
          required: true
          schema:
            type: object
            properties:
              # Define the expected properties of the DLR payload here
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /cb/viber/incmng:
    post:
      summary: Viber incoming message callback
      tags:
        - Viber
      description: Endpoint to receive Viber incoming messages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Viber incoming message payload
          required: true
          schema:
            type: object
            properties:
              test:
                type: string
                example: nikunj
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success
        400:
          description: Bad Request
        500:
          description: Internal Server Error

          
  /campaign/v1/add:
    post:
      summary: Add Campaign
      tags:
        - Campaign
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "test"
                description:
                  type: string
                  example: "test"
                channel:
                  type: array
                  example: ["whatsapp"]
                whatsappTemplateId:
                  type: integer
                  example: "1"
                viberTemplateId:
                  type: integer
                  example: "2"
                smsTemplateId:
                  type: integer
                  example: "3"
                rules:
                  type: array
                  example: []
                tags:
                  type: array
                  example: ["week1","packaging"]
                status:
                  type: string
                  example: "completed"
                tenantId:
                  type: integer
                  example: 1
                isArchived:
                  type: boolean
                  example: false
                reoccurenceType:
                  type: string
                  example: "custom"
                reoccurenceDetails:
                  type: object
                  properties:
                    repeatEvery:
                      type: integer
                      example: 1
                    intervalTimeUnit:
                      type: string
                      example: "day"
                    afterOccurences:
                      type: integer
                      example: 5
                    startDate:
                      type: string
                      format: date
                      example: "2024-09-26"
                    endDate:
                      type: string
                      format: date
                      example: "2024-09-27"
                    time:
                      type: string
                      format: time
                      example: "14:25"                                                    
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCohortResponse'            
        400:
          description: Bad Request
        500:
          description: Internal Server Error      

  /campaign/v1/{id}:
    get:
      summary: Get Campaign By Id
      tags:
        - Campaign
      security:
        - BearerAuth: []      
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCampaignResponse'            
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    delete:
      summary: Delete Campaign By Id
      tags:
        - Campaign
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success
              success:  
                type: boolean
                example: true
              code:
                type: string
                example: "200"
              data: 
                type: integer
                example: 10
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    put:
      summary: Update Campaign
      tags:
        - Campaign
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                name:
                  type: string
                  example: "test"
                description:
                  type: string
                  example: "test"
                channel:
                  type: array
                  example: ["whatsapp"]
                whatsappTemplateId:
                  type: integer
                  example: "1"
                viberTemplateId:
                  type: integer
                  example: "2"
                smsTemplateId:
                  type: integer
                  example: "3"
                rules:
                  type: array
                  example: []
                tags:
                  type: array
                  example: ["week1","packaging"]
                status:
                  type: string
                  example: "completed"
                tenantId:
                  type: integer
                  example: 1
                isArchived:
                  type: boolean
                  example: false
                reoccurenceType:
                  type: string
                  example: "custom"
                reoccurenceDetails:
                  type: object
                  properties:
                    repeatEvery:
                      type: integer
                      example: 1
                    intervalTimeUnit:
                      type: string
                      example: "day"
                    afterOccurences:
                      type: integer
                      example: 5
                    startDate:
                      type: string
                      format: date
                      example: "2024-09-26"
                    endDate:
                      type: string
                      format: date
                      example: "2024-09-27"
                    time:
                      type: string
                      format: time
                      example: "14:25"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCohortResponse'            
        400:
          description: Bad Request
        500:
          description: Internal Server Error        
        
  /campaign/v1/list:
    post:
      summary: List Campaign with filters
      tags:
        - Campaign
      security:
        - BearerAuth: []
      parameters:
        - name: tenantId
          in: header
  /template/v1/add:
    post:
      summary: "Add a new template"
      description: "This API allows you to add a new template."
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
      responses:
        '200':
          description: "Template created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'    

  /template/v1/{templateId}:
    get:
      summary: "Get template by ID"
      description: "Retrieves details of a specific template by its ID."
      tags:
        - Templates
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: integer
          description: "The ID of the template to retrieve."
      responses:
        '200':
          description: "Template details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDetailsResponse'     

    delete:
      summary: "Delete a template by ID"
      description: "Deletes a specific template by its ID."
      tags:
        - Templates
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: integer
            description: "The ID of the template to delete."
          example: 1
      responses:
        '200':
          description: "Template deleted successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  /template/v1/list:
    post:
      summary: "List templates"
      description: "Retrieves a paginated list of templates with filtering, sorting, and search capabilities."
      tags:
        - Templates
      parameters:
        - in: header
          name: tenantId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page: 
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                sortField:
                  type: string
                  example: id
                sortOrder:
                  type: string
                  example: ASC
                filters:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "LineMate"
                    status:
                      type: string
                      example: "completed"
                    isArchived: 
                      type: boolean
                      example: false
                    channel: 
                      type: array
                      items:
                        type: string
                      example: ["whatsapp"]
                    tags:
                      type: array
                      items:
                        type: string
                      example: ["week1", "packaging"]
                    tenantId:
                      type: integer
                      example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCampaignResponse'
        400:
          description: Bad Request
        500:
          description: Internal Server Error

          description: "The ID of the tenant."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateListRequest'
      responses:
        '200':
          description: "Templates retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateListResponse'     

  /template/v1/upload-template-content:
    post:
      summary: "Upload template content file"
      description: "Uploads a template content file (e.g., image or video) and associates it with a tenant."
      tags:
        - Templates
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "The file to upload."
                mediaType:
                  type: string
                  enum:
                    - image
                    - video
                    - document
                  description: "The type of media being uploaded."
                  example: "image"
                tenantId:
                  type: string
                  description: "The ID of the tenant."
                  example: "1"
      responses:
        '200':
          description: "File uploaded successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse' 

  
tags:
  - name: Permission
    description: Endpoints for creating and managing permissions.
  - name: Role
    description: Endpoints for creating and managing roles.
  - name: Auth
    description: Endpoints for user authentication.
  - name: User
    description: Endpoints for managing users.
  - name: Tenant
    description: Endpoints for creating and managing tenants.
  - name: Variable
    description: Endpoints for creating and managing variables.
  - name: Content
    description: Endpoints for creating and managing content.
  - name: Assessment
    description: Endpoints for creating and managing assessment.
  - name: Filters
    description: Endpoints for get dynamic filters .
  - name: File
    description: Endpoints for upload file .
  - name: Cohort
    description: Endpoints for creating cohort and managing users.
  - name: Viber
    description: Endpoints for receiving content from viber.
  - name: Campaign
    description: Endpoints for creating and managing Campaigns
